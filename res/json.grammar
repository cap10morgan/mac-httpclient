/**
    A Grammar for JSON.
    
 */

@start        = Empty | array | object;

object        = openCurly objectContent closeCurly;
objectContent = Empty | actualObject;
actualObject  = property commaProperty*;
property      = propertyName colon value;
commaProperty = comma property;
propertyName  = QuotedString;         // NOTE: property names are quoted in JSON

array         = openBracket arrayContent closeBracket;
arrayContent  = Empty | actualArray;
actualArray   = value commaValue*;
commaValue    = comma value;

value         = null | true | false | array | object | number | string;

string        = QuotedString;
number        = Num;
null          = 'null';
true          = 'true';
false         = 'false';

openCurly     = '{';
closeCurly    = '}';
openBracket   = '[';
closeBracket  = ']';
comma         = ',';
colon         = ':';


/**

    The built-in terminal production types are (note titlecase) : Empty, Num, QuotedString, Word, UppercaseWord, LowercaseWord
    You define collections (alternations, repetitions or sequences) and literal terminals (in quotes). These should be lowercase.
    The special '@start' production is the outermost production.
    
    you can discard tokens by following it with .discard like:
    
    closeCurly = '}'.discard;
    
    Feed this grammar to -[TDGrammarParserFactory parserForGrammar:assembler:] along with a reference
    to an assembler (a call back delegate), and it will return a TDParser object which can 
    parse strings conforming to this language/grammar.
        
    The when the returned parser is used, the provided assembler will receive method callbacks for each production matched, like:

    -workOnObjectAssembly:
    -workOnObjectContentAssembly:
    -workOnPropertyAssembly:
    -workOnArrayAssembly:
    -workOnOpenCurlyAssembly:
    etc.
    
    Each callback method must accept a single TDAssembly argument. This assembly argument
    will contain information about the progress made on the the string currently being parsed.
    Also the assembly's stack will contain the tokens parsed so far in the current statement.

*/